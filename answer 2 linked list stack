#include<iostream>
#include <chrono>
using namespace std;


class node{
public:
    int data;
    node *next;

};
class stack_linked{
private:
    node*top;
public:
    stack_linked(){
        top=NULL;
    }
    void push(int data){
        node *NewNode=new node;
        NewNode->data=data;
        NewNode->next=top;
        top=NewNode;
    }
    int pop(){
        int data=top->data;
        node* dlet=top;
        top=top->next;
        delete dlet;
        return data;
    }
    void display(){
        node*current=top;
        while(current!=NULL){
            cout<<current->data<<" ";
            current=current->next;
        }
        cout<<endl;
    }
};
int main(){

    auto start = chrono::steady_clock::now();
    stack_linked *stacklinked=new stack_linked;
    stacklinked->push(8);
    stacklinked->push(10);
    stacklinked->push(5);
    stacklinked->push(11);
    stacklinked->push(15);
    stacklinked->push(23);
    stacklinked->push(6);
    stacklinked->push(18);
    stacklinked->push(20);
    stacklinked->push(17);
    stacklinked->display();
    stacklinked->pop();
    stacklinked->pop();
    stacklinked->pop();
    stacklinked->pop();
    stacklinked->pop();
    stacklinked->display();
    stacklinked->push(4);
    stacklinked->push(30);
    stacklinked->push(3);
    stacklinked->push(1);
    stacklinked->display();

    auto end1 = chrono::steady_clock::now();
    
    auto end2 = chrono::steady_clock::now();

    auto diff1 = end1 - start;
    auto diff2 = end2 - end1;
    cout <<"time for array stack="<< chrono::duration <double, milli> (diff1).count() << " ms" << endl;
   

    return 0;
}
